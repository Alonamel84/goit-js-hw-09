{"version":3,"sources":["js/03-promises.js"],"names":["createPromise","position","delay","shouldResolve","Math","random","Promise","result","reject","setTimeout","delayNode","document","querySelector","formNode","stepNode","amountNode","buttonNode","Number","value","addEventListener","e","preventDefault","then","console","log","catch"],"mappings":";AAAA,SAASA,EAAcC,EAAUC,GACzBC,MAAAA,EAAgBC,KAAKC,SAAW,GAC/B,OAAA,IAAIC,QAAQ,CAACC,EAAQC,KAC1BC,WAAW,KACLN,EAEFI,EAAO,CAAEN,SAAAA,EAAUC,MAAAA,IAGnBM,EAAO,CAAEP,SAAAA,EAAUC,MAAAA,KAEpBA,KAGP,MAAMQ,EAAYC,SAASC,cAAc,uBACnCC,EAAWF,SAASC,cAAc,QAClCE,EAAWH,SAASC,cAAc,sBAClCG,EAAaJ,SAASC,cAAc,wBACpCI,EAAaL,SAASC,cAAc,UAC1C,IAAIV,EAAQe,OAAOP,EAAUQ,OAC7BL,EAASM,iBAAiB,SAAUC,IAClCA,EAAEC,iBAGG,IAAA,IAAIpB,EAAW,EAAGA,GAAYgB,OAAOF,EAAWG,OAAQjB,IAC3DD,EAAcC,EAAUC,GACrBoB,KAAK,EAAGrB,SAAAA,EAAUC,MAAAA,MACjBqB,QAAQC,2BAA2BvB,QAAeC,SAEnDuB,MAAM,EAAGxB,SAAAA,EAAUC,MAAAA,MAClBqB,QAAQC,0BAA0BvB,QAAeC,SAErDA,GAASe,OAAOH,EAASI","file":"03-promises.81273b47.js","sourceRoot":"../src","sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((result, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        result({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\nconst delayNode = document.querySelector('input[name=\"delay\"]');\nconst formNode = document.querySelector('form');\nconst stepNode = document.querySelector('input[name=\"step\"]');\nconst amountNode = document.querySelector('input[name=\"amount\"]');\nconst buttonNode = document.querySelector('button');\nlet delay = Number(delayNode.value);\nformNode.addEventListener('submit', e => {\n  e.preventDefault();\n\n  // console.log(delayNode.value, amountNode.value, stepNode.value);\n  for (let position = 1; position <= Number(amountNode.value); position++) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += Number(stepNode.value);\n  }\n});\n\n//\n"]}