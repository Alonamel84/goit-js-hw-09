{"version":3,"sources":["js/03-promises.js"],"names":["createPromise","position","delay","shouldResolve","Math","random","Promise","result","reject","setTimeout","delayNode","document","querySelector","formNode","stepNode","amountNode","buttonNode","addEventListener","e","preventDefault","console","log","value","then","catch"],"mappings":";AAAA,SAASA,EAAcC,EAAUC,GACzBC,MAAAA,EAAgBC,KAAKC,SAAW,GAC/B,OAAA,IAAIC,QAAQ,CAACC,EAAQC,KAC1BC,WAAW,KACLN,EAEFI,EAAO,CAAEN,SAAAA,EAAUC,MAAAA,IAGnBM,EAAO,CAAEP,SAAAA,EAAUC,MAAAA,KAEpBA,KAGP,MAAMQ,EAAYC,SAASC,cAAc,uBACnCC,EAAWF,SAASC,cAAc,QAClCE,EAAWH,SAASC,cAAc,sBAClCG,EAAaJ,SAASC,cAAc,wBACpCI,EAAaL,SAASC,cAAc,UAE1CC,EAASI,iBAAiB,SAAUC,IAClCA,EAAEC,iBACFC,QAAQC,IAAIX,EAAUY,MAAOP,EAAWO,MAAOR,EAASQ,OACnD,IAAA,IAAIrB,EAAW,EAAGA,GAAYc,EAAWO,MAAOrB,IACnDC,MAAQQ,EAAUY,MAAQR,EAASQ,MACnCtB,EAAcC,EAAUC,OACrBqB,KAAK,EAAGtB,SAAAA,EAAUC,MAAAA,MACjBkB,QAAQC,2BAA2BpB,QAAeC,SAEnDsB,MAAM,EAAGvB,SAAAA,EAAUC,MAAAA,MAClBkB,QAAQC,0BAA0BpB,QAAeC","file":"03-promises.1c2cdd67.js","sourceRoot":"../src","sourcesContent":["function createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((result, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        result({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\nconst delayNode = document.querySelector('input[name=\"delay\"]');\nconst formNode = document.querySelector('form');\nconst stepNode = document.querySelector('input[name=\"step\"]');\nconst amountNode = document.querySelector('input[name=\"amount\"]');\nconst buttonNode = document.querySelector('button');\n\nformNode.addEventListener('submit', e => {\n  e.preventDefault();\n  console.log(delayNode.value, amountNode.value, stepNode.value);\n  for (let position = 1; position <= amountNode.value; position++) {\n    delay = delayNode.value + stepNode.value;\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n\n//\n"]}